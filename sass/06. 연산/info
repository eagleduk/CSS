산출 연산자 
    - 곱하거나 나눌때는 단위없는 순수 숫자로만 가능
+, -, *, /, %

비교 연산자
==, !=, <, >, <=, >=

논리 연산자
and, or, not


** 숫자 연산
단위가 다르면 calc() 함수를 이용하여 연산.

나누기 연산을 사용할 때에는 
1. 변수에 저장하여 값을 나누거나 나누는 값을 지정했을때,
2. ()에 묶여있는 경우
3. 다른 산술 표현식의 일부로 사용되는 경우
div {
  $x: 100px;
  width: $x / 2;  // 변수에 저장된 값을 나누기
  height: (100px / 2);  // 괄호로 묶어서 나누기
  font-size: 10px + 12px / 3;  // 더하기 연산과 같이 사용
}


** 문자 연산
+ 가 사용.
첫 번쨰 피연산자가 따옴표가 있다면 연산 결과를 따옴표로 묶고,
첫 번째 피연산자에 따옴표가 없다면 연산 결과도 따옴표로 묶지 않는다.

SCSS ------------------------------------------------------
div::after {
  content: "Hello " + World;
  flex-flow: row + "-reverse" + " " + wrap
}

CSS -------------------------------------------------------
div::after {
  content: "Hello World";
  flex-flow: row-reverse wrap;
}

** 색상

SCSS -------------------------------------------------------
div {
  color: #123456 + #345678;
  // R: 12 + 34 = 46
  // G: 34 + 56 = 8a
  // B: 56 + 78 = ce
  background: rgba(50, 100, 150, .5) + rgba(10, 20, 30, .5);
  // R: 50 + 10 = 60
  // G: 100 + 20 = 120
  // B: 150 + 30 = 180
  // A: Alpha channels must be equal
}

CSS ---------------------------------------------------------
div {
  color: #468ace;
  background: rgba(60, 120, 180, 0.5);
}

    **** 투명도를 연산할 때에는 
        - opacify() : 불투명 하게 만들떄(+)
        - transparentize() : 투명하게 만들떄(-)

SCSS -------------------------------------------------------
$color: rgba(10, 20, 30, .5);
div {
  color: opacify($color, .3);  // 30% 더 불투명하게 / 0.5 + 0.3
  background-color: transparentize($color, .2);  // 20% 더 투명하게 / 0.5 - 0.2
}

CSS ---------------------------------------------------------
div {
  color: rgba(10, 20, 30, 0.8);
  background-color: rgba(10, 20, 30, 0.3);
}


** 논리 연산
@if 조건문에서 사용